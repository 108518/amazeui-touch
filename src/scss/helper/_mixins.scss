// Clearfix
// @see http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Sizing
// -----------------------------------------------------------------------------
@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

// TODO: add scrollableX & scrollableY
@mixin scrollable() {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

// Text
// -----------------------------------------------------------------------------

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Line clamp
// http://dropshado.ws/post/1015351370/webkit-line-clamp
@mixin line-clamp($lines: 2, $line-height: 1.3em) {
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines; // number of lines to show
  overflow: hidden;
  line-height: $line-height;
  max-height: $line-height * $lines;
}

// Form
// -----------------------------------------------------------------------------

// Disable OS-level styles
@mixin no-appearance {
  -webkit-appearance: none;
  -moz-appearance: none;
}

// Shape
// -----------------------------------------------------------------------------
/// CSS Triangle
/// Creates a CSS triangle, which can be used for dropdown arrows, popup tails, and more. Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
///
/// @param {number} $triangle-size - Width of the triangle.
/// @param {color} $triangle-color - Color of the triangle.
/// @param {keyword} $triangle-direction - Direction the triangle points. Can be `top`, `right`, `bottom`, or `left`.
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}


// Retina hairline
// @see https://gist.github.com/w0rm/c0dd4b7aed71acc03900
// @see http://dieulot.net/css-retina-hairline
// -----------------------------------------------------------------------------
$rl-pseudo-element: (
  top: before,
  right: after,
  bottom: after,
  left: before,
);

@mixin rl-get-size($position) {
  @if ($position == top or $position == bottom) {
    @include size(100%, 1px);
  } @else {
    @include size(1px, 100%);
  }
}

// simulate a 1px border on retina screens
%retina-line-v-scale {
  @media (-webkit-min-device-pixel-ratio: 2) {
    transform: scaleY(0.5);
  }
  @media (-webkit-min-device-pixel-ratio: 3) {
    transform: scaleY(.33);
  }
}

%retina-line-h-scale {
  @media (-webkit-min-device-pixel-ratio: 2) {
    transform: scaleX(0.5);
  }
  @media (-webkit-min-device-pixel-ratio: 3) {
    transform: scaleX(.33);
  }
}

@mixin rl-get-scale($position) {
  @if ($position == top or $position == bottom) {
    @extend %retina-line-v-scale;
  } @else {
    @extend %retina-line-h-scale;
  }
}

// @param {top|right|bottom|left} $position - line position
// @param {before|after} $element - pseudo element
// @param {String} $color - border color
@mixin retina-line($position: top, $element: before, $color: #d9d9d9) {
  $transform-origin-map: (
    top: 50% 0,
    right: 100% 50%,
    bottom: 50% 100%,
    left: 0 50%,
  );

  position: relative;

  &:#{$element} {
    content: "";
    position: absolute;

    @if ($position == top or $position == left) {
      top: 0;
      left: 0;
      bottom: auto;
      right: auto;
    } @else if ($position == right) {
      top: 0;
      right: 0;
      bottom: auto;
      left: auto;
    } @else if ($position == bottom) {
      top: auto;
      right: auto;
      bottom: 0;
      left: 0;
    }

    z-index: 15;
    display: block;
    background-color: $color;
    @include rl-get-size($position);
    transform-origin: map_get($transform-origin-map, $position);
    @include rl-get-scale($position);
  }
}

@mixin retina-line-color($element, $color) {
  &:#{$element} {
    background-color: $color;
  }
}

@mixin retina-line-remove($element) {
  &:#{$element} {
    display: none;
  }
}

// Animation
// -----------------------------------------------------------------------------

@mixin force-hardware-acceleration {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000;
}

%force-hardware-acceleration {
  @include force-hardware-acceleration();
}


// Browser compatibility
// -----------------------------------------------------------------------------

// FUCK Android UC class namespace
$legacy-android-uc: 'ua-stupid-uc';

// 在安卓里 flex 里的子元素一定要是 block 元素，如果用行内元素 可以用flex-inline。
// (不过 flex-inline 兼容也不好，所以全改成块元素就好了)
// @see https://github.com/amazeui/amazeui-touch/issues/12#issuecomment-169879658
@mixin fixes-flexbox-for-andriod {
  display: block;
}

// flex-basis fallback
@mixin flex-basis-fallback($width) {
  @if $legacyFlexBoxSupport {
    .#{$legacy-android-uc} & {
      width: $width;
    }
  }
}

// 安卓 UC UA 检测
// - 解决 NavBar `.navbar-nav-item` 使用 inline-flex 以后宽度异常问题
// - 测试环境：MI4 / Android 6.0.1 / MIUI 7 6.4.14 开发版
// - 负面影响: 产生左侧的链接 icon 和 tile 顺序不对（`order` 失效）问题 -> JS 中已调整顺序
@mixin navbar-item-android-uc-fallback() {
  @if $legacyFlexBoxSupport {
    .#{$legacy-android-uc} & {
      display: inline-block;
    }
  }
}
